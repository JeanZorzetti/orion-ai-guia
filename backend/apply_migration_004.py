"""
Script para aplicar a migra√ß√£o 004 - Fix Product SKU Constraint

Este script deve ser executado ANTES de reiniciar o backend com as mudan√ßas no c√≥digo.
"""
import os
import sys
from pathlib import Path

# Adicionar o diret√≥rio raiz ao path
sys.path.append(str(Path(__file__).parent))

from sqlalchemy import create_engine, text
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
load_dotenv()

def apply_migration():
    """Aplica a migra√ß√£o 004"""

    # Conectar ao banco de dados
    database_url = os.getenv("DATABASE_URL")
    if not database_url:
        print("‚ùå Erro: DATABASE_URL n√£o definida no .env")
        sys.exit(1)

    print("=" * 60)
    print("üîß Aplicando Migra√ß√£o 004 - Fix Product SKU Constraint")
    print("=" * 60)

    engine = create_engine(database_url)

    # Ler o arquivo SQL
    migration_file = Path(__file__).parent / "migrations" / "004_fix_product_sku_constraint.sql"

    if not migration_file.exists():
        print(f"‚ùå Arquivo de migra√ß√£o n√£o encontrado: {migration_file}")
        sys.exit(1)

    with open(migration_file, 'r', encoding='utf-8') as f:
        sql_content = f.read()

    # Separar comandos SQL (por ponto-e-v√≠rgula)
    sql_commands = [cmd.strip() for cmd in sql_content.split(';') if cmd.strip() and not cmd.strip().startswith('--')]

    try:
        with engine.connect() as conn:
            # Executar cada comando
            for i, cmd in enumerate(sql_commands, 1):
                if cmd.strip():
                    print(f"\nüìù Executando comando {i}/{len(sql_commands)}...")
                    # Mostrar primeiras 100 caracteres do comando
                    cmd_preview = cmd[:100] + "..." if len(cmd) > 100 else cmd
                    print(f"   {cmd_preview}")

                    try:
                        result = conn.execute(text(cmd))

                        # Se for um SELECT, mostrar resultado
                        if cmd.strip().upper().startswith('SELECT'):
                            rows = result.fetchall()
                            for row in rows:
                                print(f"   ‚úì {dict(row)}")
                        else:
                            print(f"   ‚úì Sucesso!")

                    except Exception as e:
                        print(f"   ‚ö†Ô∏è Aviso: {e}")
                        # Continuar mesmo se houver erro (ex: constraint j√° n√£o existe)

            # Commit das mudan√ßas
            conn.commit()

        print("\n" + "=" * 60)
        print("‚úÖ Migra√ß√£o 004 aplicada com sucesso!")
        print("=" * 60)
        print("\nüìå Pr√≥ximos passos:")
        print("   1. Reiniciar o backend (as mudan√ßas no c√≥digo j√° est√£o prontas)")
        print("   2. Testar cria√ß√£o de produtos com SKU vazio")
        print("   3. Verificar que SKUs √∫nicos funcionam por workspace\n")

    except Exception as e:
        print(f"\n‚ùå Erro ao aplicar migra√ß√£o: {e}")
        sys.exit(1)


if __name__ == "__main__":
    apply_migration()
